model {

  mu_a_rew ~ dnorm(0,1)T(0,1)
  mu_a_pun ~ dnorm(0,1)T(0,1)
  mu_K ~ dnorm(0,1)T(0,)
  mu_theta ~ dnorm(0,1)T(0,)
  mu_omega_f ~ dnorm(0,.1)
  mu_omega_p ~ dnorm(0,.1)

  lambda_a_rew ~ dgamma(.01,.01)
  lambda_a_pun ~ dgamma(.01,.01)
  lambda_K ~ dgamma(.01,.01)
  lambda_theta ~ dgamma(.01,.01)
  lambda_omega_f ~ dgamma(.01,.01)
  lambda_omega_p ~ dgamma(.01,.01)
  
  # more informed priors (that hopefully fit the SD used in the simulation a bit better)
  #lambda_a_rew ~ dgamma(2.5/2,.01/2)
  #lambda_a_pun ~ dgamma(2.5/2,.01/2)
  #lambda_K ~ dgamma(2.5/2,.01/2)
  #lambda_theta ~ dgamma(2.5/2,.01/2)
  #lambda_omega_f ~ dgamma(2.5/2,.01/2)
  #lambda_omega_p ~ dgamma(2.5/2,.01/2)
  
  for (s in 1:nsubs) {

    a_rew[s] ~ dnorm(mu_a_rew,lambda_a_rew)
    a_pun[s] ~ dnorm(mu_a_pun,lambda_a_pun)
    K[s]  ~ dnorm(mu_K,lambda_K)
    theta[s] ~ dnorm(mu_theta,lambda_theta) # set to 1 in order to simplify model
    omega_f[s] ~ dnorm(mu_omega_f,lambda_omega_f)
    omega_p[s] ~ dnorm(mu_omega_p,lambda_omega_p)
  
    #------ set t1 model variables --------------------------
      
    Ev[s,1,1] <- 0
    Ev[s,1,2] <- 0
    Ev[s,1,3] <- 0
    Ev[s,1,4] <- 0
      
    Ef[s,1,1] <- 0
    Ef[s,1,2] <- 0
    Ef[s,1,3] <- 0
    Ef[s,1,4] <- 0
      
    PS[s,1,1] <- 1
    PS[s,1,2] <- 1
    PS[s,1,3] <- 1
    PS[s,1,4] <- 1

    p[s,1,1] <- .25
    p[s,1,2] <- .25
    p[s,1,3] <- .25
    p[s,1,4] <- .25

    for (t in 2:ntrials[s]) {
      
      #getting the "sign" of the payoff from the previous choice
      signX[s,t] <- ifelse(X[s,t-1]<0,-1,1)
      
      for (d in 1:4) {
        
        # -------- Updating expected values ------------------------
        Ev_update[s,t,d] <- ifelse(X[s,t-1]>=0,
                                  Ev[s,t-1,d] + a_rew[s]*((X[s,t-1]) - Ev[s,t-1,d]), 
                                  Ev[s,t-1,d] + a_pun[s]*((X[s,t-1]) - Ev[s,t-1,d])
        )
                              
        Ev[s,t,d] <- ifelse(d==x[s,t-1],Ev_update[s,t,d],Ev[s,t-1,d])
        
        # -------- Updating expected frequencies ------------------------
        #update expected frequencies for ALL decks - AS IF THERE WERE ALL CHOSEN
        Ef_cho[s,t,d] <- ifelse(X[s,t-1]>=0, 
                                Ef[s,t-1,d] + a_rew[s]*(signX[s,t] - Ef[s,t-1,d]),
                                Ef[s,t-1,d] + a_pun[s]*(signX[s,t] - Ef[s,t-1,d])
        )
        
        #update expected frequencies for ALL decks - AS IF THEY WERE ALL UNCHOSEN (aka. "reversal learning")
        Ef_not[s,t,d] <- ifelse(X[s,t-1]>=0, 
                                Ef[s,t-1,d] + a_pun[s]*(-(signX[s,t]/3) - Ef[s,t-1,d]),
                                Ef[s,t-1,d] + a_rew[s]*(-(signX[s,t]/3) - Ef[s,t-1,d])
        ) 
        
        #copy appropriate values to Ef variable
        Ef[s,t,d] <- ifelse(d==x[s,t-1],Ef_cho[s,t,d],Ef_not[s,t,d])  
        #------------------------------------------------------------------
        
        #ifelse needed to disctiminate between chosen and unchosen decks
        PS[s,t,d] <- ifelse(x[s,t-1]==d,1/(1+K[s]),PS[s,t-1,d]/(1+K[s]))
        
        V[s,t,d] <- Ev[s,t,d] + Ef[s,t,d]*omega_f[s] + PS[s,t,d]*omega_p[s]
        
        exp_p[s,t,d] <- exp(theta[s]*V[s,t,d])
        
      }
      
      for (d in 1:4) {
        p[s,t,d] <- exp_p[s,t,d]/sum(exp_p[s,t,])
      }
        
      x[s,t] ~ dcat(p[s,t,])
      
    }
  }
}